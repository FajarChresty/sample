{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst fs = require('fs');\nconst path = require('path');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\nconst FEEDBACK_FILE = path.join(__dirname, 'data', 'feedbacks.json');\n\n// Middleware\napp.use(bodyParser.json());\n\n// Helper function to read feedbacks\nconst readFeedbacks = () => {\n  try {\n    const data = fs.readFileSync(FEEDBACK_FILE, 'utf8');\n    return JSON.parse(data);\n  } catch (err) {\n    return [];\n  }\n};\n\n// Helper function to write feedbacks\nconst writeFeedbacks = feedbacks => {\n  fs.writeFileSync(FEEDBACK_FILE, JSON.stringify(feedbacks, null, 2));\n};\n\n// Get all feedbacks\napp.get('/feedbacks', (req, res) => {\n  const feedbacks = readFeedbacks();\n  res.json(feedbacks);\n});\n\n// Post a new feedback\napp.post('/feedbacks', (req, res) => {\n  const newFeedback = req.body;\n  if (!newFeedback.name || !newFeedback.message) {\n    return res.status(400).json({\n      error: 'Name and message are required'\n    });\n  }\n  const feedbacks = readFeedbacks();\n  feedbacks.push(newFeedback);\n  writeFeedbacks(feedbacks);\n  res.status(201).json(newFeedback);\n});\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","bodyParser","fs","path","app","PORT","process","env","FEEDBACK_FILE","join","__dirname","use","json","readFeedbacks","data","readFileSync","JSON","parse","err","writeFeedbacks","feedbacks","writeFileSync","stringify","get","req","res","post","newFeedback","body","name","message","status","error","push","listen","console","log"],"sources":["C:/Users/ACER/Downloads/package-lock/src/components/Feedback.js"],"sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3000;\r\nconst FEEDBACK_FILE = path.join(__dirname, 'data', 'feedbacks.json');\r\n\r\n// Middleware\r\napp.use(bodyParser.json());\r\n\r\n// Helper function to read feedbacks\r\nconst readFeedbacks = () => {\r\n    try {\r\n        const data = fs.readFileSync(FEEDBACK_FILE, 'utf8');\r\n        return JSON.parse(data);\r\n    } catch (err) {\r\n        return [];\r\n    }\r\n};\r\n\r\n// Helper function to write feedbacks\r\nconst writeFeedbacks = (feedbacks) => {\r\n    fs.writeFileSync(FEEDBACK_FILE, JSON.stringify(feedbacks, null, 2));\r\n};\r\n\r\n// Get all feedbacks\r\napp.get('/feedbacks', (req, res) => {\r\n    const feedbacks = readFeedbacks();\r\n    res.json(feedbacks);\r\n});\r\n\r\n// Post a new feedback\r\napp.post('/feedbacks', (req, res) => {\r\n    const newFeedback = req.body;\r\n\r\n    if (!newFeedback.name || !newFeedback.message) {\r\n        return res.status(400).json({ error: 'Name and message are required' });\r\n    }\r\n\r\n    const feedbacks = readFeedbacks();\r\n    feedbacks.push(newFeedback);\r\n    writeFeedbacks(feedbacks);\r\n\r\n    res.status(201).json(newFeedback);\r\n});\r\n\r\n// Start the server\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrC,MAAMG,aAAa,GAAGL,IAAI,CAACM,IAAI,CAACC,SAAS,EAAE,MAAM,EAAE,gBAAgB,CAAC;;AAEpE;AACAN,GAAG,CAACO,GAAG,CAACV,UAAU,CAACW,IAAI,CAAC,CAAC,CAAC;;AAE1B;AACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;EACxB,IAAI;IACA,MAAMC,IAAI,GAAGZ,EAAE,CAACa,YAAY,CAACP,aAAa,EAAE,MAAM,CAAC;IACnD,OAAOQ,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;EAC3B,CAAC,CAAC,OAAOI,GAAG,EAAE;IACV,OAAO,EAAE;EACb;AACJ,CAAC;;AAED;AACA,MAAMC,cAAc,GAAIC,SAAS,IAAK;EAClClB,EAAE,CAACmB,aAAa,CAACb,aAAa,EAAEQ,IAAI,CAACM,SAAS,CAACF,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACvE,CAAC;;AAED;AACAhB,GAAG,CAACmB,GAAG,CAAC,YAAY,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAChC,MAAML,SAAS,GAAGP,aAAa,CAAC,CAAC;EACjCY,GAAG,CAACb,IAAI,CAACQ,SAAS,CAAC;AACvB,CAAC,CAAC;;AAEF;AACAhB,GAAG,CAACsB,IAAI,CAAC,YAAY,EAAE,CAACF,GAAG,EAAEC,GAAG,KAAK;EACjC,MAAME,WAAW,GAAGH,GAAG,CAACI,IAAI;EAE5B,IAAI,CAACD,WAAW,CAACE,IAAI,IAAI,CAACF,WAAW,CAACG,OAAO,EAAE;IAC3C,OAAOL,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACnB,IAAI,CAAC;MAAEoB,KAAK,EAAE;IAAgC,CAAC,CAAC;EAC3E;EAEA,MAAMZ,SAAS,GAAGP,aAAa,CAAC,CAAC;EACjCO,SAAS,CAACa,IAAI,CAACN,WAAW,CAAC;EAC3BR,cAAc,CAACC,SAAS,CAAC;EAEzBK,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACnB,IAAI,CAACe,WAAW,CAAC;AACrC,CAAC,CAAC;;AAEF;AACAvB,GAAG,CAAC8B,MAAM,CAAC7B,IAAI,EAAE,MAAM;EACnB8B,OAAO,CAACC,GAAG,CAAE,yCAAwC/B,IAAK,EAAC,CAAC;AAChE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}